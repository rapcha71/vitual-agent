# Dockerfile optimizado para Virtual Agent
FROM node:18-alpine

# Instalar dependencias del sistema
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    musl-dev \
    giflib-dev \
    pixman-dev

WORKDIR /app

# Copiar package files
COPY package*.json ./

# Instalar dependencias con configuración optimizada
RUN npm cache clean --force
RUN npm install --production=false --no-audit --no-fund

# Verificar instalación de herramientas críticas
RUN npx vite --version || npm install -g vite
RUN npx esbuild --version || npm install -g esbuild

# Copiar archivos de configuración
COPY tsconfig*.json ./
COPY vite.config.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./
COPY drizzle.config.ts ./

# Copiar código fuente
COPY . .

# Build por separado para mejor control de errores
RUN echo "Building frontend..."
RUN npx vite build

RUN echo "Building backend..."
RUN npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist

# Verificar archivos de salida
RUN ls -la dist/
RUN test -f dist/index.html && echo "Frontend build OK"
RUN test -f dist/index.js && echo "Backend build OK"

# Producción
ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=8080

# Usuario no-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S virtual-agent -u 1001 -G nodejs

RUN chown -R virtual-agent:nodejs /app
USER virtual-agent

EXPOSE 8080

CMD ["node", "dist/index.js"]